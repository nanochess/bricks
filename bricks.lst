     1                                  	;
     2                                  	; Bricks game in one boot sector
     3                                  	;
     4                                  	; by Oscar Toledo G.
     5                                  	;
     6                                  	; Creation date: Nov/02/2019.
     7                                  	;
     8                                  
     9                                  	cpu 8086
    10                                  
    11                                  	;
    12                                  	; Press Left Shift to start the game
    13                                  	; Press Left Ctrl to move the paddle to left
    14                                  	; Press Left Alt to move the paddle to right
    15                                  	;
    16                                  
    17                                      %ifdef com_file
    18                                          org 0x0100
    19                                      %else
    20                                          org 0x7c00
    21                                      %endif
    22                                  
    23                                  old_time:	equ 16	; Old time 
    24                                  ball_x:		equ 14	; X-coordinate of ball (8.8 fraction)
    25                                  ball_y:		equ 12	; Y-coordinate of ball (8.8 fraction)
    26                                  ball_xs:	equ 10	; X-speed of ball (8.8 fraction)
    27                                  ball_ys:	equ 8	; Y-speed of ball (8.8 fraction)
    28                                  beep:		equ 6	; Frame count to turn off sound
    29                                  bricks:		equ 4	; Remaining bricks
    30                                  balls:         equ 2	; Remaining balls
    31                                  score:         equ 0	; Current score
    32                                  
    33                                  	;
    34                                  	; Start of the game
    35                                  	;
    36                                  start:
    37 00000000 B80200                  	mov ax,0x0002		; Text mode 80x25x16 colors
    38 00000003 CD10                    	int 0x10		; Setup
    39 00000005 B800B8                  	mov ax,0xb800		; Address of video screen
    40 00000008 8ED8                    	mov ds,ax		; Setup DS
    41 0000000A 8EC0                    	mov es,ax		; Setup ES
    42 0000000C 81EC2000                	sub sp,32
    43 00000010 31C0                    	xor ax,ax
    44 00000012 50                      	push ax			; Reset score
    45 00000013 B004                    	mov al,4		
    46 00000015 50                      	push ax			; Balls remaining
    47 00000016 89E5                    	mov bp,sp		; Setup stack frame for globals
    48                                  	;
    49                                  	; Start another level 
    50                                  	;
    51                                  another_level:
    52 00000018 C746041101              	mov word [bp+bricks],273	; 273 bricks on screen
    53 0000001D 31FF                    	xor di,di
    54 0000001F B8B101                  	mov ax,0x01b1		; Draw top border
    55 00000022 B95000                  	mov cx,80
    56 00000025 FC                      	cld
    57 00000026 F3AB                    	rep stosw
    58 00000028 B118                    	mov cl,24		; 24 rows
    59                                  .1:
    60 0000002A AB                      	stosw			; Draw left border
    61 0000002B B82000                  	mov ax,0x20		; No bricks on this row
    62 0000002E 51                      	push cx
    63 0000002F 80F917                  	cmp cl,23
    64 00000032 7309                    	jnb .2
    65 00000034 80E90F                  	sub cl,15
    66 00000037 7604                    	jbe .2
    67 00000039 B0DB                    	mov al,0xdb		; Bricks on this row
    68 0000003B 88CC                    	mov ah,cl
    69                                  .2:
    70 0000003D B127                    	mov cl,39		; 39 bricks per row
    71                                  .3:
    72 0000003F AB                      	stosw
    73 00000040 AB                      	stosw
    74 00000041 FEC4                    	inc ah			; Increase attribute color
    75 00000043 80FC08                  	cmp ah,0x08
    76 00000046 7502                    	jne .4
    77 00000048 B401                    	mov ah,0x01
    78                                  .4:
    79 0000004A E2F3                    	loop .3
    80 0000004C 59                      	pop cx
    81                                  
    82 0000004D B8B101                  	mov ax,0x01b1		; Draw right border
    83 00000050 AB                      	stosw
    84 00000051 E2D7                    	loop .1
    85                                  
    86                                  	;
    87                                  	; Start another ball
    88                                  	;
    89 00000053 BF4A0F                  	mov di,0x0f4a		; Position of paddle
    90                                  another_ball:
    91 00000056 C6460F28                	mov byte [bp+ball_x+1],0x28	; Center X
    92 0000005A C6460D14                	mov byte [bp+ball_y+1],0x14	; Center Y
    93 0000005E 31C0                    	xor ax,ax
    94 00000060 89460A                  	mov [bp+ball_xs],ax	; Static on screen
    95 00000063 894608                  	mov [bp+ball_ys],ax
    96 00000066 C6460601                	mov byte [bp+beep],0x01
    97                                  
    98 0000006A BEFE0F                  	mov si,0x0ffe		; Don't erase ball yet
    99                                  game_loop:
   100 0000006D E80F01                  	call wait_frame		; Wait 1/18.2 secs.
   101                                  
   102 00000070 C7040000                	mov word [si],0x0000	; Erase ball
   103                                  	
   104 00000074 E84401                  	call update_score	; Update score
   105                                  	
   106 00000077 B402                    	mov ah,0x02		; Read modifier keys
   107 00000079 CD16                    	int 0x16
   108 0000007B A804                    	test al,0x04		; Left ctrl
   109 0000007D 7414                    	je .1
   110 0000007F C6450600                	mov byte [di+6],0	; Erase right side of paddle
   111 00000083 C6450800                	mov byte [di+8],0
   112 00000087 83EF04                  	sub di,byte 4		; Move paddle to left
   113 0000008A 81FF020F                	cmp di,0x0f02		; Limit
   114 0000008E 7703                    	ja .1
   115 00000090 BF020F                  	mov di,0x0f02
   116                                  .1:
   117 00000093 A808                    	test al,0x08		; Left alt
   118 00000095 740D                    	je .2
   119 00000097 31C0                    	xor ax,ax		; Erase left side of paddle
   120 00000099 AB                      	stosw
   121 0000009A AB                      	stosw			; DI increased automatically
   122 0000009B 81FF940F                	cmp di,0x0f94		; Limit
   123 0000009F 7203                    	jb .2
   124 000000A1 BF940F                  	mov di,0x0f94	
   125                                  .2:
   126 000000A4 A802                    	test al,0x02		; Left shift
   127 000000A6 7412                    	je .15
   128 000000A8 8B460A                  	mov ax,[bp+ball_xs]	; Ball moving?
   129 000000AB 034608                  	add ax,[bp+ball_ys]
   130 000000AE 750A                    	jne .15			; Yes, jump
   131                                  				; Setup movement of ball
   132 000000B0 C7460A40FF              	mov word [bp+ball_xs],0xff40
   133 000000B5 C7460880FF              	mov word [bp+ball_ys],0xff80
   134                                  .15:
   135 000000BA B8DF0A                  	mov ax,0x0adf		; Paddle graphic and color
   136 000000BD 57                      	push di
   137 000000BE AB                      	stosw			; Draw paddle
   138 000000BF AB                      	stosw
   139 000000C0 AB                      	stosw
   140 000000C1 AB                      	stosw
   141 000000C2 AB                      	stosw
   142 000000C3 5F                      	pop di
   143                                  
   144 000000C4 8B5E0E                  	mov bx,[bp+ball_x]		; Draw ball
   145 000000C7 8B460C                  	mov ax,[bp+ball_y]
   146 000000CA E8E100                  	call locate_ball	; Locate on screen
   147 000000CD F6460C80                	test byte [bp+ball_y],0x80	; Y-coordinate half fraction?
   148 000000D1 B460                    	mov ah,0x60		; Interchange colors for smooth mov.
   149 000000D3 7402                    	je .12
   150 000000D5 B406                    	mov ah,0x06
   151 000000D7 B0DC                    .12:	mov al,0xdc		; Graphic
   152 000000D9 8907                    	mov [bx],ax		; Draw
   153 000000DB 53                      	push bx
   154 000000DC 5E                      	pop si
   155                                  
   156                                  .14:
   157 000000DD 8B5E0E                  	mov bx,[bp+ball_x]		; Ball position
   158 000000E0 8B460C                  	mov ax,[bp+ball_y]
   159 000000E3 035E0A                  	add bx,[bp+ball_xs]	; Add movement speed
   160 000000E6 034608                  	add ax,[bp+ball_ys]
   161 000000E9 50                      	push ax
   162 000000EA 53                      	push bx
   163 000000EB E8C000                  	call locate_ball	; Locate on screen
   164 000000EE 8A07                    	mov al,[bx]
   165 000000F0 3CB1                    	cmp al,0xb1		; Touching borders
   166 000000F2 751D                    	jne .3
   167 000000F4 B92F15                  	mov cx,5423		; 1193180 / 220
   168 000000F7 E89D00                  	call speaker		; Generate sound
   169 000000FA 5B                      	pop bx
   170 000000FB 58                      	pop ax
   171 000000FC 80FF4F                  	cmp bh,0x4f
   172 000000FF 7404                    	je .8
   173 00000101 84FF                    	test bh,bh
   174 00000103 7503                    	jne .7
   175                                  .8:
   176 00000105 F75E0A                  	neg word [bp+ball_xs]	; Negate X-speed if touches sides
   177                                  .7:	
   178 00000108 84E4                    	test ah,ah
   179 0000010A 7503                    	jnz .9
   180 0000010C F75E08                  	neg word [bp+ball_ys]	; Negate Y-speed if touches sides
   181 0000010F EBCC                    .9:	jmp .14
   182                                  
   183                                  .3:
   184 00000111 3CDF                    	cmp al,0xdf		; Touching paddle
   185 00000113 751B                    	jne .4
   186 00000115 29FB                    	sub bx,di		; Subtract paddle position
   187 00000117 83EB04                  	sub bx,byte 4
   188 0000011A B106                    	mov cl,6		; Multiply by 64
   189 0000011C D3E3                    	shl bx,cl
   190 0000011E 895E0A                  	mov [bp+ball_xs],bx	; New X speed for ball
   191 00000121 C7460880FF              	mov word [bp+ball_ys],0xff80	; Update Y speed for ball
   192 00000126 B9970A                  	mov cx,2711		; 1193180 / 440
   193 00000129 E86B00                  	call speaker		; Generate sound
   194 0000012C 5B                      	pop bx
   195 0000012D 58                      	pop ax
   196 0000012E EBAD                    	jmp .14
   197                                  
   198                                  .4:
   199 00000130 3CDB                    	cmp al,0xdb		; Touching brick
   200 00000132 7524                    	jne .5
   201 00000134 B94B05                  	mov cx,1355		; 1193180 / 880
   202 00000137 E85D00                  	call speaker		; Generate sound
   203 0000013A F6C302                  	test bl,2		; Aligned with brick?
   204 0000013D 7502                    	jne .10			; Yes, jump
   205 0000013F 4B                      	dec bx			; Align
   206 00000140 4B                      	dec bx
   207 00000141 31C0                    .10:	xor ax,ax		; Erase brick
   208 00000143 8907                    	mov [bx],ax
   209 00000145 894702                  	mov [bx+2],ax
   210 00000148 FF4600                  	inc word [bp+score]	; Increase score
   211 0000014B F75E08                  	neg word [bp+ball_ys]	; Negate Y speed (rebound)
   212 0000014E 5B                      	pop bx
   213 0000014F 58                      	pop ax
   214 00000150 FF4E04                  	dec word [bp+bricks]	; One brick less on screen
   215 00000153 7588                    	jne .14			; Fully completed? No, jump.
   216 00000155 E9C0FE                  	jmp another_level	; Start another level
   217                                  
   218                                  .5:
   219 00000158 5B                      	pop bx
   220 00000159 58                      	pop ax
   221                                  .6:
   222 0000015A 895E0E                  	mov [bp+ball_x],bx		; Update ball position
   223 0000015D 89460C                  	mov [bp+ball_y],ax
   224 00000160 80FC19                  	cmp ah,0x19		; Ball exited through bottom?
   225 00000163 7403                    	je ball_lost		; Yes, jump
   226 00000165 E905FF                  	jmp game_loop		; No, repeat game loop
   227                                  
   228                                  	;
   229                                  	; Ball lost
   230                                  	; 
   231                                  ball_lost:
   232 00000168 B95E2A                  	mov cx,10846		; 1193180 / 110
   233 0000016B E82900                  	call speaker		; Generate sound
   234                                  
   235 0000016E C7040000                	mov word [si],0		; Erase ball
   236 00000172 FE4E02                  	dec byte [bp+balls]	; One ball less
   237 00000175 7803                    	js .1			; All finished? Yes, jump
   238 00000177 E9DCFE                  	jmp another_ball	; Start another ball
   239                                  
   240 0000017A E81300                  .1:	call wait_frame.2	; Turn off sound
   241 0000017D CD20                    	int 0x20		; Exit to DOS / bootOS
   242                                  
   243                                  wait_frame:
   244                                  .0:
   245 0000017F B400                    	mov ah,0x00		; Read ticks
   246 00000181 CD1A                    	int 0x1a		; Call BIOS
   247 00000183 3B5610                  	cmp dx,[bp+old_time]	; Wait for change
   248 00000186 74F7                    	je .0
   249 00000188 895610                  	mov [bp+old_time],dx
   250                                  
   251 0000018B FE4E06                  	dec byte [bp+beep]		; Decrease time to turn off beep
   252 0000018E 7506                    	jne .1
   253                                  .2:
   254 00000190 E461                    	in al,0x61
   255 00000192 24FC                    	and al,0xfc		; Turn off
   256 00000194 E661                    	out 0x61,al
   257                                  .1:
   258                                  
   259 00000196 C3                      	ret
   260                                  
   261                                  	;
   262                                  	; Generate sound on PC speaker
   263                                  	;
   264                                  speaker:
   265 00000197 B0B6                    	mov al,0xb6		; Setup timer 2
   266 00000199 E643                    	out 0x43,al
   267 0000019B 88C8                    	mov al,cl		; Low byte of timer count
   268 0000019D E642                    	out 0x42,al
   269 0000019F 88E8                    	mov al,ch		; High byte of timer count
   270 000001A1 E642                    	out 0x42,al
   271 000001A3 E461                    	in al,0x61
   272 000001A5 0C03                    	or al,0x03		; Connect PC speaker to timer 2
   273 000001A7 E661                    	out 0x61,al
   274 000001A9 C6460603                	mov byte [bp+beep],3	; Duration
   275 000001AD C3                      	ret
   276                                  
   277                                  	;
   278                                  	; Locate ball on screen
   279                                  	;
   280                                  locate_ball:
   281 000001AE B0A0                    	mov al,0xa0
   282 000001B0 F6E4                    	mul ah			; AH = Y coordinate (row)
   283 000001B2 88FB                    	mov bl,bh		; BH = X coordinate (column)
   284 000001B4 B700                    	mov bh,0
   285 000001B6 D1E3                    	shl bx,1
   286 000001B8 01C3                    	add bx,ax
   287 000001BA C3                      	ret
   288                                  
   289                                  	;
   290                                  	; Update score indicator (from bootRogue)
   291                                  	;
   292                                  update_score:
   293 000001BB BB980F                  	mov bx,0x0f98		; Point to bottom right corner
   294 000001BE 8B4600                  	mov ax,[bp+score]
   295 000001C1 E80300                  	call .1
   296 000001C4 8A4602                  	mov al,[bp+balls]
   297                                  .1:
   298 000001C7 31C9                    	xor cx,cx              ; CX = Quotient
   299 000001C9 41                      .2:	inc cx
   300 000001CA 2D0A00                  	sub ax,10              ; Division by subtraction
   301 000001CD 73FA                    	jnc .2
   302 000001CF 053A0A                  	add ax,0x0a3a          ; Convert remainder to ASCII digit + color
   303 000001D2 E80400                  	call .3                ; Put on screen
   304 000001D5 91                      	xchg ax,cx
   305 000001D6 48                      	dec ax                 ; Quotient is zero?
   306 000001D7 75EE                    	jnz .1                 ; No, jump to show more digits.
   307                                  
   308 000001D9 8907                    .3:	mov [bx],ax
   309 000001DB 4B                      	dec bx
   310 000001DC 4B                      	dec bx
   311 000001DD C3                      	ret
   312                                  
   313                                      %ifdef com_file
   314                                      %else
   315 000001DE 4F<rept>                	times 510-($-$$) db 0x4f
   316 000001FE 55AA                    	db 0x55,0xaa           ; Make it a bootable sector
   317                                      %endif
